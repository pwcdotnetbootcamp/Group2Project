STEP1: 
//nodejs command promt//
cd ___(copy path of folder)
ng new Employee
cd Employee
ng serve

STEP 2:
//visual code//
cd Employee
ng generate component AddEmployee
ng generate component RemoveEmployee
ng generate component UpdateEmployee
ng generate component ReadEmployee
ng generate service employee

STEP 3: //Edit all files//


1. AddComponent.ts


import { Component } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-add-employee',
  templateUrl: './add-employee.component.html',
  styleUrls: ['./add-employee.component.css']
})
export class AddEmployeeComponent {

  constructor(private employeeService: EmployeeService) { }

  addEmployee(employeeData: any) {
    this.employeeService.addEmployee(employeeData).subscribe(response => {
      console.log('Employee added successfully:', response);
    });
  }
}




2. AddCOmponent.html



<div class="add-employee">
    <h2>Add Employee</h2>
    <form (submit)="addEmployee()">
      <div class="form-group">
        <label for="employeeName">Name:</label>
        <input type="text" id="employeeName" name="employeeName" [(ngModel)]="employeeData.name" required>
      </div>
      <div class="form-group">
        <label for="employeeTitle">Title:</label>
        <input type="text" id="employeeTitle" name="employeeTitle" [(ngModel)]="employeeData.title" required>
      </div>
      <div class="form-group">
        <label for="employeeDepartment">Department:</label>
        <input type="text" id="employeeDepartment" name="employeeDepartment" [(ngModel)]="employeeData.department" required>
      </div>
      <button type="submit">Add Employee</button>
    </form>
  </div>




3. Removecomponent.ts



import { Component } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-remove-employee',
  templateUrl: './remove-employee.component.html',
})
export class RemoveEmployeeComponent {
  constructor(private employeeService: EmployeeService) {}

  removeEmployee(employeeId: number): void {
    this.employeeService.removeEmployee(employeeId).subscribe(
      (response) => {
        console.log('Employee removed successfully', response);
        // Handle success, update the UI, or navigate to another component.
      },
      (error) => {
        console.error('Error removing employee', error);
        // Handle error, display an error message, etc.
      }
    );
  }
}





4. Removecomponent.html




<h2>Remove Employee</h2>
<label for="employeeId">Employee ID:</label>
<input type="number" id="employeeId" [(ngModel)]="employeeId">
<button (click)="removeEmployee(employeeId)">Remove Employee</button>



5. Updatecomponent.ts



import { Component } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
})
export class UpdateEmployeeComponent {
  constructor(private employeeService: EmployeeService) {}
  updateEmployee(employeeId: number, employeeData: any): void {
    this.employeeService.updateEmployee(employeeId, employeeData).subscribe(
      (response) => {
        console.log('Employee updated successfully', response);
        // Handle success, reset the form, or navigate to another component.
      },
      (error) => {
        console.error('Error updating employee', error);
        // Handle error, display an error message, etc.
      }
    );
  }  
  }





6. Updatecomponent.html



<h2>Update Employee</h2>
<label for="employeeId">Employee ID:</label>
<input type="number" id="employeeId" [(ngModel)]="employeeData.id">
<label for="employeeName">New Employee Name:</label>
<input type="text" id="employeeName" [(ngModel)]="employeeData.name">
<button (click)="updateEmployee(employeeData)">Update Employee</button>






7. Readcomponent.ts:        //???????//




import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '../employee.service';

// Define an interface for the employee data structure
interface Employee {
  id: number;
  name: string;
  // Add other properties as needed
}

@Component({
  selector: 'app-read-employee',
  templateUrl: './read-employee.component.html',
})
export class ReadEmployeeComponent implements OnInit {
  employees: Employee[] = [];

  constructor(private employeeService: EmployeeService) {}

  ngOnInit(): void {
    this.getEmployees();
  }

  getEmployees(): void {
    this.employeeService.getEmployees().subscribe(
      (data: Employee[]) => {
        this.employees = data;
      },
      (error) => {
        console.error('Error fetching employees', error);
        // Handle error, display an error message, etc.
      }
    );
  }
}






8. readcomponent.html



<div class="employee-list">
    <h2>Employee List</h2>
    <ul>
      <li *ngFor="let employee of employees">
        {{ employee.name }} - {{ employee.id }}
        <!-- You can display more employee details as needed -->
      </li>
    </ul>
  </div>
  








