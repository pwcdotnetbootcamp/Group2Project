STEP1: 
//nodejs command promt//
cd ___(copy path of folder)
ng new Employee
cd Employee
ng serve

STEP 2:
//visual code//
cd Employee
ng generate component AddEmployee
ng generate component RemoveEmployee
ng generate component UpdateEmployee
ng generate component ReadEmployee
ng generate service employee

STEP 3: //Edit all files//


1. AddComponent.ts


import { Component } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-add-employee',
  templateUrl: './add-employee.component.html',
  styleUrls: ['./add-employee.component.css']
})
export class AddEmployeeComponent {

  constructor(private employeeService: EmployeeService) { }

  addEmployee(employeeData: any) {
    this.employeeService.addEmployee(employeeData).subscribe(response => {
      console.log('Employee added successfully:', response);
    });
  }
}




2. AddCOmponent.html



<!DOCTYPE html>
<html>
<head>
    <title>Add Employee</title>
</head>
<body>
    <h1>Add Employee</h1>
    <form action="employee-service/add" method="POST">
        <!-- Employee input fields: Name, ID, etc. -->
        <label for="employeeName">Name:</label>
        <input type="text" id="employeeName" name="employeeName" required><br>

        <label for="employeeID">Employee ID:</label>
        <input type="text" id="employeeID" name="employeeID" required><br>

        <!-- Add more input fields as needed -->

        <input type="submit" value="Add Employee">
    </form>
</body>
</html>




3. Removecomponent.ts



import { Component } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-remove-employee',
  templateUrl: './remove-employee.component.html',
})
export class RemoveEmployeeComponent {
  constructor(private employeeService: EmployeeService) {}

  removeEmployee(employeeId: number): void {
    this.employeeService.removeEmployee(employeeId).subscribe(
      (response) => {
        console.log('Employee removed successfully', response);
        // Handle success, update the UI, or navigate to another component.
      },
      (error) => {
        console.error('Error removing employee', error);
        // Handle error, display an error message, etc.
      }
    );
  }
}





4. Removecomponent.html




<h2>Remove Employee</h2>
<label for="employeeId">Employee ID:</label>
<input type="number" id="employeeId" [(ngModel)]="employeeId">
<button (click)="removeEmployee(employeeId)">Remove Employee</button>



5. Updatecomponent.ts



import { Component } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-update-employee',
  templateUrl: './update-employee.component.html',
})
export class UpdateEmployeeComponent {
  constructor(private employeeService: EmployeeService) {}
  updateEmployee(employeeId: number, employeeData: any): void {
    this.employeeService.updateEmployee(employeeId, employeeData).subscribe(
      (response) => {
        console.log('Employee updated successfully', response);
        // Handle success, reset the form, or navigate to another component.
      },
      (error) => {
        console.error('Error updating employee', error);
        // Handle error, display an error message, etc.
      }
    );
  }  
  }





6. Updatecomponent.html



<h2>Update Employee</h2>
<label for="employeeId">Employee ID:</label>
<input type="number" id="employeeId" [(ngModel)]="employeeData.id">
<label for="employeeName">New Employee Name:</label>
<input type="text" id="employeeName" [(ngModel)]="employeeData.name">
<button (click)="updateEmployee(employeeData)">Update Employee</button>






7. Readcomponent.ts:      



import { Component, OnInit } from '@angular/core';
import { EmployeeService } from '../employee.service';

@Component({
  selector: 'app-read-employee',
  templateUrl: './read-employee.component.html',
  styleUrls: ['./read-employee.component.css']
})
export class ReadEmployeeComponent implements OnInit {
  employees: any[] = []; // Define the employees array to store data

  constructor(private employeeListService: EmployeeService) {}

  ngOnInit() {
    // Fetch the list of employees from the service when the component initializes
    this.employeeListService.getEmployees().subscribe(
      (data: any) => {
        this.employees = data; // Assign the retrieved data to the employees array
      },
      error => {
        console.error('Error fetching employees:', error);
      }
    );
  }
}




8. readcomponent.html



<div class="employee-list">
    <h2>Employee List</h2>
    <ul>
      <li *ngFor="let employee of employees">
        {{ employee.name }} - {{ employee.id }}
        <!-- You can display more employee details as needed -->
      </li>
    </ul>
  </div>



STEP 4: //SerVice code//



1. employeeservice.ts




import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';

@Injectable({
  providedIn: 'root'
})
export class EmployeeService {
  private apiBaseUrl = 'your-api-url'; // Replace with the actual API URL

  constructor(private http: HttpClient) { }

  // Add an employee
  addEmployee(employeeData: any) { // Define a type for employeeData
    return this.http.post(`${this.apiBaseUrl}/add-employee`, employeeData);
  }

  // Other methods with typed parameters
  removeEmployee(employeeId: number) {
    return this.http.delete(`${this.apiBaseUrl}/remove-employee/${employeeId}`);
  }

  updateEmployee(employeeId: number, employeeData: any) { // Define a type for employeeData
    return this.http.put(`${this.apiBaseUrl}/update-employee/${employeeId}`, employeeData);
  }

  getEmployees() {
    return this.http.get(`${this.apiBaseUrl}/read-employees`);
  }
}



2. Appmodule.ts



import { NgModule,  NO_ERRORS_SCHEMA} from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { AddEmployeeComponent } from './add-employee/add-employee.component';
import { RemoveEmployeeComponent } from './remove-employee/remove-employee.component';
import { UpdateEmployeeComponent } from './update-employee/update-employee.component';
import { ReadEmployeeComponent } from './read-employee/read-employee.component';

@NgModule({
  declarations: [
    AppComponent,
    AddEmployeeComponent,
    RemoveEmployeeComponent,
    UpdateEmployeeComponent,
    ReadEmployeeComponent
  ],
  imports: [
    BrowserModule,
    FormsModule,
    AppRoutingModule
  ],
  providers: [],
  schemas: [NO_ERRORS_SCHEMA],  
  bootstrap: [AppComponent]
})
export class AppModule { }
