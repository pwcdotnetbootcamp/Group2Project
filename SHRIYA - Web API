Class1.cs


using System;
using System.Data.SqlClient;
using System.Data;
using System.Collections.Generic;
using EmpLib.Models;


namespace EmpLib
{
    public class Class1
    {
        public static List<Employee> employees = new List<Employee>();              

        public static List<Employee> update(int EmpID, string FirstName, string JOB, string LOC)
        {
            List<Employee> E1 = new List<Employee>();
            try
            {
                //create an SQL connection by passing the required connection string
                //Our target database is PracticeDB
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=PracticeDB;Integrated Security=True"); 

                con.Open();  //Connection is opened

                //Create the SQL Commands for updating the data in our table -> Represents a Transact-SQL statement
                //We have set the our connection opened previously as the Connection for these SQL Commamnds
                SqlCommand cmd = new SqlCommand($"Update Emp set JOB='{JOB}' where EmpID='{EmpID}'", con);   
                SqlCommand cmd2 = new SqlCommand($"Update Emp set FirstName='{FirstName}' where EmpID='{EmpID}'", con);  
                SqlCommand cmd3 = new SqlCommand($"Update Emp set LOC='{LOC}' where EmpID='{EmpID}'", con);

                //We now call ExecuteNonQuery, which executes a T-SQL statement against the given Connection and returns the no. of rows affected
                //Here we pass it the Connection string and Query string
                int recUp = cmd.ExecuteNonQuery();
                int recUp2 = cmd2.ExecuteNonQuery();  
                int recUp3 = cmd3.ExecuteNonQuery();

                E1.Add(new Employee(EmpID, FirstName, JOB, LOC));
                return E1;  
            }
            catch (Exception e)
            { return null; }
            }


        
            public static List<Employee> delete(int EmpID, string FirstName, string JOB, string LOC)
            {
                List<Employee> E1 = new List<Employee>();
                try
                {
                    //create an SQL connection by passing the required connection string
                    //Our target database is PracticeDB
                    SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=PracticeDB;Integrated Security=True");

                    con.Open(); //Connection is opened

                    //Create the SQL Commands for deleting the data in our table -> Represents a Transact-SQL statement
                    //We have set the our connection opened previously as the Connection for these SQL Commamnds
                    SqlCommand cmd = new SqlCommand($"Delete from Emp where EmpID='{EmpID}' and FirstName='{FirstName}' and JOB='{JOB}' and LOC='{LOC}'", con);

                    //We now call ExecuteNonQuery, which executes a T-SQL statement against the given Connection and returns the no. of rows affected
                    //Here we pass it the Connection string and Query string    
                    int recDel = cmd.ExecuteNonQuery();

                    E1.Add(new Employee(EmpID, FirstName, JOB, LOC));
                    return E1;
            }
                catch (Exception e) { return null; }
            }


        public static List<Employee> insert(int EmpID, string FirstName, string JOB, string LOC)
        {
            List<Employee> E1 = new List<Employee>();
            try
            {
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=PracticeDB;Integrated Security=True");
                con.Open();

                SqlCommand cmd = new SqlCommand($"Insert into Emp values('{EmpID}', '{FirstName}', '{JOB}', '{LOC}')", con);

                int recDel = cmd.ExecuteNonQuery();

                E1.Add(new Employee(EmpID, FirstName, JOB, LOC));
                return E1;
            }
            catch (Exception e) { return null; }
        }




        public static List<Employee> getEmps()
        {
            try
            {                
                SqlConnection con = new SqlConnection(@"Data Source=DESKTOP-O7LF2JA;Initial Catalog=PracticeDB;Integrated Security=True");
                con.Open();

                SqlCommand cmd = new SqlCommand("Select * from Emp", con);
                cmd.CommandType = CommandType.Text;

                SqlDataReader rdr = cmd.ExecuteReader(); //We create an SqlDataReader to read data from the SQL server

                employees = new List<Employee>();

                while (rdr.Read())   //will return true if there are more rows otherwise false
                {
                    Employee e = new Employee();
                    //e.id = Convert.ToInt32(rdr["id"]);
                    e.EmpID = rdr.GetInt32("EmpID");
                    e.FirstName = rdr.GetString("FirstName");
                    e.JOB = rdr.GetString("JOB");
                    e.LOC = rdr.GetString("LOC");

                    employees.Add(e);
                }

                return employees;
            }

            catch { return null; }

        }

    }
}



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





EmpController.cs


using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Cors;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using EmpLib.Models;
using EmpLib;


namespace Practice5.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmpController : ControllerBase
    {          

        [HttpGet]
        
        [Route("Emps")]
        [EnableCors("AllowOrigin")]
        public IEnumerable<Employee> GetEmp()
        {        
           return Class1.getEmps();
            
        }


        [HttpGet]
        [Route("updateEmp/{EmpID:int}/{FirstName}/{JOB}/{LOC}")]
        [EnableCors("AllowOrigin")]
        public IEnumerable<Employee> UpdateEmp(int EmpID, string FirstName, string JOB, string LOC)
        {
            return (EmpLib.Class1.update(EmpID, FirstName, JOB, LOC));
        }


        [HttpGet]
        [Route("DeleteEmployees/{EmpID:int}/{FirstName}/{JOB}/{LOC}")]
        [EnableCors("AllowOrigin")]
        public IEnumerable<Employee> DeleteEmp(int EmpID, string FirstName, string JOB, string LOC)
        {
            return (EmpLib.Class1.delete(EmpID, FirstName, JOB, LOC));
        }


        [HttpGet]
        [Route("InsertEmployees/{EmpID:int}/{FirstName}/{JOB}/{LOC}")]
        [EnableCors("AllowOrigin")]
        public IEnumerable<Employee> InsertEmp(int EmpID, string FirstName, string JOB, string LOC)
        {
            return (EmpLib.Class1.insert(EmpID, FirstName, JOB, LOC));
        }

    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




Startup.cs


using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using Microsoft.AspNetCore.Cors;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace Practice5
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {

            services.AddControllers();
            services.AddSwaggerGen(c =>
            {
                c.SwaggerDoc("v1", new OpenApiInfo { Title = "Practice5", Version = "v1" });
            });

            //I have Added AddCors
            services.AddCors(c =>
            {
                c.AddPolicy("AllowOrigin",
                    options =>
                        options.AllowAnyOrigin()
                        .AllowAnyHeader()
                         .AllowAnyMethod());
            });

        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "Practice5 v1"));
            }

            app.UseRouting();
            //I have Added in between Routing and Redirection
            app.UseCors(x => x
.AllowAnyOrigin()
.AllowAnyMethod()
.AllowAnyHeader());

            app.UseHttpsRedirection();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}




-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Employee.cs


using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace EmpLib.Models
{
    public class Employee
    {
        public int EmpID { get; set; }
        public string FirstName { get; set; }

        public string JOB { get; set; }

        public string LOC { get; set; }

        public Employee() { }

        public Employee(int empID, string firstName, string jOB, string lOC)
        {
            EmpID = empID;
            FirstName = firstName;
            JOB = jOB;
            LOC = lOC;
        }
    }
}



-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Class1.cs and Employee.cs are files in EmpLib which is a class library, added as a project reference in our main project Practice5.
We have installed Microsoft.AspNet.WebApi.Cors in Practice5 through NuGet Package Manager.

